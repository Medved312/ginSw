definitions:
  model.Genre:
    properties:
      id:
        type: integer
      movies:
        items:
          $ref: '#/definitions/model.Movie'
        type: array
      name_genre:
        type: string
    type: object
  model.Movie:
    properties:
      description:
        type: string
      genres:
        items:
          $ref: '#/definitions/model.Genre'
        type: array
      id:
        type: integer
      name_movie:
        type: string
    type: object
  saveDTO.GenreDTO:
    properties:
      name:
        type: string
    type: object
  saveDTO.MovieDTO:
    properties:
      description:
        type: string
      id_genres:
        items:
          type: integer
        type: array
      name:
        type: string
    type: object
  views.GenreView:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  views.MovieView:
    properties:
      description:
        type: string
      genres:
        items:
          $ref: '#/definitions/views.GenreView'
        type: array
      id:
        type: integer
      name:
        type: string
    type: object
host: localhost:5050
info:
  contact: {}
  description: This is a sample server celler server.
  title: Swagger Example API
  version: "1.0"
paths:
  /all-genres:
    get:
      consumes:
      - application/json
      description: Получение списка жанров
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/views.GenreView'
            type: array
      summary: Get genre
      tags:
      - Genres
  /genre/{id}:
    delete:
      consumes:
      - application/json
      description: Удаление жанра из базы
      parameters:
      - description: id genre
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      summary: DeleteGenres
      tags:
      - Genres
    get:
      consumes:
      - application/json
      description: Получение жанра
      parameters:
      - description: id genre
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/views.GenreView'
      summary: Get genre
      tags:
      - Genres
    put:
      consumes:
      - application/json
      description: Обновление данных жанра
      parameters:
      - description: id genre
        in: path
        name: id
        required: true
        type: integer
      - description: New values
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.Genre'
      produces:
      - application/json
      responses: {}
      summary: UpdateGenres
      tags:
      - Genres
  /genre/add/:
    post:
      consumes:
      - application/json
      description: Добавление жанра в базу
      parameters:
      - description: Сreating a genre
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/saveDTO.GenreDTO'
      produces:
      - application/json
      responses: {}
      summary: CreateGenre
      tags:
      - Genres
  /movie/{id}:
    delete:
      consumes:
      - application/json
      description: Удаление фильма из базы
      parameters:
      - description: id movie
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      summary: DeleteMovie
      tags:
      - Movies
    get:
      consumes:
      - application/json
      description: Получение фильма
      parameters:
      - description: id movie
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/views.MovieView'
      summary: Get movie
      tags:
      - Movies
    put:
      consumes:
      - application/json
      description: Обновление данных фильма
      parameters:
      - description: id movie
        in: path
        name: id
        required: true
        type: integer
      - description: New values
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/model.Movie'
      produces:
      - application/json
      responses: {}
      summary: UpdateMovie
      tags:
      - Movies
  /movie/add/:
    post:
      consumes:
      - application/json
      description: Добавление фильма в базу
      parameters:
      - description: Title and description of the film
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/saveDTO.MovieDTO'
      produces:
      - application/json
      responses: {}
      summary: CreateMovie
      tags:
      - Movies
swagger: "2.0"
